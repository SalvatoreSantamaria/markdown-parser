{
  "{\"sourceRoot\":\"C:\\\\Users\\\\samsa\\\\Desktop\\\\Code\\\\markdownParser\\\\src\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\samsa\\\\Desktop\\\\Code\\\\markdownParser\",\"filename\":\"C:\\\\Users\\\\samsa\\\\Desktop\\\\Code\\\\markdownParser\\\\src\\\\markdownParser.test.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\samsa\\\\Desktop\\\\Code\\\\markdownParser\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser\\src\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser",
      "filename": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser\\src\\markdownParser.test.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "BigIntLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "StaticBlock": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser\\src\\markdownParser.test.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser\\src\\markdownParser.test.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser\\src\\",
        "sourceFileName": "markdownParser.test.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _chai = require(\"chai\");\n\nvar _markdownParser = require(\"./markdownParser\");\n\ndescribe('Markdown Headers', function () {\n  it('passes basic valid cases', function () {\n    var expectedH1 = \"<h1>header</h1>\";\n    var actualH1 = (0, _markdownParser.markdownParser)(\"# header\");\n    var expectedH2 = \"<h2>smaller header</h2>\";\n    var actualH2 = (0, _markdownParser.markdownParser)(\"## smaller header\");\n    var expectedH6 = \"<h6>h6 header</h6>\";\n    var actualH6 = (0, _markdownParser.markdownParser)(\"###### h6 header\");\n    (0, _chai.expect)(actualH1).to.deep.equal(expectedH1);\n    (0, _chai.expect)(actualH2).to.deep.equal(expectedH2);\n    (0, _chai.expect)(actualH6).to.deep.equal(expectedH6);\n  });\n  it(\"returns the input for basic invalid cases where input is '#Invalid' \", function () {\n    var expected = '#Invalid';\n    var actual = (0, _markdownParser.markdownParser)('#Invalid');\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"returns the input for basic invalid cases where input is '####### Invalid' \", function () {\n    var expected = '########Invalid';\n    var actual = (0, _markdownParser.markdownParser)('########Invalid');\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"returns the input for basic invalid cases where input is ' #Invalid' \", function () {\n    var expected = ' #Invalid';\n    var actual = (0, _markdownParser.markdownParser)(' #Invalid');\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"returns the input for basic invalid cases where input is ' # Invalid' \", function () {\n    var expected = ' # Invalid';\n    var actual = (0, _markdownParser.markdownParser)(' # Invalid');\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n}); // let assert = require(\"chai\").assert;\n// describe('Markdown Headers', function() {\n//   it('basic_valid_cases', function() {\n//     //assert.deepEqual(markdownParser(\"# header\"), \"<h1>header</h1>\");\n//     assert.deepEqual(markdownParser(\"## smaller header\"), \"<h2>smaller header</h2>\");\n//   });\n//   it('basic_invalid_cases', function() {\n//     assert.deepEqual(markdownParser(\"#Invalid\"), \"#Invalid\");\n//   });\n// });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcmtkb3duUGFyc2VyLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsImV4cGVjdGVkSDEiLCJhY3R1YWxIMSIsImV4cGVjdGVkSDIiLCJhY3R1YWxIMiIsImV4cGVjdGVkSDYiLCJhY3R1YWxINiIsInRvIiwiZGVlcCIsImVxdWFsIiwiZXhwZWN0ZWQiLCJhY3R1YWwiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBRUFBLFFBQVEsQ0FBQyxrQkFBRCxFQUFxQixZQUFNO0FBQ2pDQyxFQUFBQSxFQUFFLENBQUMsMEJBQUQsRUFBNkIsWUFBTTtBQUNuQyxRQUFNQyxVQUFVLEdBQUcsaUJBQW5CO0FBQ0EsUUFBTUMsUUFBUSxHQUFHLG9DQUFlLFVBQWYsQ0FBakI7QUFDQSxRQUFNQyxVQUFVLEdBQUcseUJBQW5CO0FBQ0EsUUFBTUMsUUFBUSxHQUFHLG9DQUFlLG1CQUFmLENBQWpCO0FBQ0EsUUFBTUMsVUFBVSxHQUFHLG9CQUFuQjtBQUNBLFFBQU1DLFFBQVEsR0FBRyxvQ0FBZSxrQkFBZixDQUFqQjtBQUVBLHNCQUFPSixRQUFQLEVBQWlCSyxFQUFqQixDQUFvQkMsSUFBcEIsQ0FBeUJDLEtBQXpCLENBQStCUixVQUEvQjtBQUNBLHNCQUFPRyxRQUFQLEVBQWlCRyxFQUFqQixDQUFvQkMsSUFBcEIsQ0FBeUJDLEtBQXpCLENBQStCTixVQUEvQjtBQUNBLHNCQUFPRyxRQUFQLEVBQWlCQyxFQUFqQixDQUFvQkMsSUFBcEIsQ0FBeUJDLEtBQXpCLENBQStCSixVQUEvQjtBQUNELEdBWEMsQ0FBRjtBQWFBTCxFQUFBQSxFQUFFLENBQUMsc0VBQUQsRUFBeUUsWUFBTTtBQUMvRSxRQUFNVSxRQUFRLEdBQUcsVUFBakI7QUFDQSxRQUFNQyxNQUFNLEdBQUcsb0NBQWUsVUFBZixDQUFmO0FBQ0Esc0JBQU9BLE1BQVAsRUFBZUosRUFBZixDQUFrQkMsSUFBbEIsQ0FBdUJDLEtBQXZCLENBQTZCQyxRQUE3QjtBQUNELEdBSkMsQ0FBRjtBQU1BVixFQUFBQSxFQUFFLENBQUMsNkVBQUQsRUFBZ0YsWUFBTTtBQUN0RixRQUFNVSxRQUFRLEdBQUcsaUJBQWpCO0FBQ0EsUUFBTUMsTUFBTSxHQUFHLG9DQUFlLGlCQUFmLENBQWY7QUFDQSxzQkFBT0EsTUFBUCxFQUFlSixFQUFmLENBQWtCQyxJQUFsQixDQUF1QkMsS0FBdkIsQ0FBNkJDLFFBQTdCO0FBQ0QsR0FKQyxDQUFGO0FBTUFWLEVBQUFBLEVBQUUsQ0FBQyx1RUFBRCxFQUEwRSxZQUFNO0FBQ2hGLFFBQU1VLFFBQVEsR0FBRyxXQUFqQjtBQUNBLFFBQU1DLE1BQU0sR0FBRyxvQ0FBZSxXQUFmLENBQWY7QUFDQSxzQkFBT0EsTUFBUCxFQUFlSixFQUFmLENBQWtCQyxJQUFsQixDQUF1QkMsS0FBdkIsQ0FBNkJDLFFBQTdCO0FBQ0QsR0FKQyxDQUFGO0FBTUFWLEVBQUFBLEVBQUUsQ0FBQyx3RUFBRCxFQUEyRSxZQUFNO0FBQ2pGLFFBQU1VLFFBQVEsR0FBRyxZQUFqQjtBQUNBLFFBQU1DLE1BQU0sR0FBRyxvQ0FBZSxZQUFmLENBQWY7QUFDQSxzQkFBT0EsTUFBUCxFQUFlSixFQUFmLENBQWtCQyxJQUFsQixDQUF1QkMsS0FBdkIsQ0FBNkJDLFFBQTdCO0FBQ0QsR0FKQyxDQUFGO0FBT0QsQ0F2Q08sQ0FBUixDLENBMENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IkM6XFxVc2Vyc1xcc2Ftc2FcXERlc2t0b3BcXENvZGVcXG1hcmtkb3duUGFyc2VyXFxzcmNcXCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4cGVjdCB9IGZyb20gJ2NoYWknXHJcbmltcG9ydCB7IG1hcmtkb3duUGFyc2VyIH0gZnJvbSAnLi9tYXJrZG93blBhcnNlcic7XHJcblxyXG5kZXNjcmliZSgnTWFya2Rvd24gSGVhZGVycycsICgpID0+IHtcclxuICBpdCgncGFzc2VzIGJhc2ljIHZhbGlkIGNhc2VzJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZXhwZWN0ZWRIMSA9IFwiPGgxPmhlYWRlcjwvaDE+XCJcclxuICAgIGNvbnN0IGFjdHVhbEgxID0gbWFya2Rvd25QYXJzZXIoXCIjIGhlYWRlclwiKVxyXG4gICAgY29uc3QgZXhwZWN0ZWRIMiA9IFwiPGgyPnNtYWxsZXIgaGVhZGVyPC9oMj5cIlxyXG4gICAgY29uc3QgYWN0dWFsSDIgPSBtYXJrZG93blBhcnNlcihcIiMjIHNtYWxsZXIgaGVhZGVyXCIpXHJcbiAgICBjb25zdCBleHBlY3RlZEg2ID0gXCI8aDY+aDYgaGVhZGVyPC9oNj5cIlxyXG4gICAgY29uc3QgYWN0dWFsSDYgPSBtYXJrZG93blBhcnNlcihcIiMjIyMjIyBoNiBoZWFkZXJcIilcclxuXHJcbiAgICBleHBlY3QoYWN0dWFsSDEpLnRvLmRlZXAuZXF1YWwoZXhwZWN0ZWRIMSlcclxuICAgIGV4cGVjdChhY3R1YWxIMikudG8uZGVlcC5lcXVhbChleHBlY3RlZEgyKVxyXG4gICAgZXhwZWN0KGFjdHVhbEg2KS50by5kZWVwLmVxdWFsKGV4cGVjdGVkSDYpXHJcbiAgfSlcclxuXHJcbiAgaXQoXCJyZXR1cm5zIHRoZSBpbnB1dCBmb3IgYmFzaWMgaW52YWxpZCBjYXNlcyB3aGVyZSBpbnB1dCBpcyAnI0ludmFsaWQnIFwiLCAoKSA9PiB7XHJcbiAgICBjb25zdCBleHBlY3RlZCA9ICcjSW52YWxpZCdcclxuICAgIGNvbnN0IGFjdHVhbCA9IG1hcmtkb3duUGFyc2VyKCcjSW52YWxpZCcpIFxyXG4gICAgZXhwZWN0KGFjdHVhbCkudG8uZGVlcC5lcXVhbChleHBlY3RlZClcclxuICB9KVxyXG5cclxuICBpdChcInJldHVybnMgdGhlIGlucHV0IGZvciBiYXNpYyBpbnZhbGlkIGNhc2VzIHdoZXJlIGlucHV0IGlzICcjIyMjIyMjIEludmFsaWQnIFwiLCAoKSA9PiB7XHJcbiAgICBjb25zdCBleHBlY3RlZCA9ICcjIyMjIyMjI0ludmFsaWQnXHJcbiAgICBjb25zdCBhY3R1YWwgPSBtYXJrZG93blBhcnNlcignIyMjIyMjIyNJbnZhbGlkJykgXHJcbiAgICBleHBlY3QoYWN0dWFsKS50by5kZWVwLmVxdWFsKGV4cGVjdGVkKVxyXG4gIH0pXHJcblxyXG4gIGl0KFwicmV0dXJucyB0aGUgaW5wdXQgZm9yIGJhc2ljIGludmFsaWQgY2FzZXMgd2hlcmUgaW5wdXQgaXMgJyAjSW52YWxpZCcgXCIsICgpID0+IHtcclxuICAgIGNvbnN0IGV4cGVjdGVkID0gJyAjSW52YWxpZCdcclxuICAgIGNvbnN0IGFjdHVhbCA9IG1hcmtkb3duUGFyc2VyKCcgI0ludmFsaWQnKSBcclxuICAgIGV4cGVjdChhY3R1YWwpLnRvLmRlZXAuZXF1YWwoZXhwZWN0ZWQpXHJcbiAgfSlcclxuXHJcbiAgaXQoXCJyZXR1cm5zIHRoZSBpbnB1dCBmb3IgYmFzaWMgaW52YWxpZCBjYXNlcyB3aGVyZSBpbnB1dCBpcyAnICMgSW52YWxpZCcgXCIsICgpID0+IHtcclxuICAgIGNvbnN0IGV4cGVjdGVkID0gJyAjIEludmFsaWQnXHJcbiAgICBjb25zdCBhY3R1YWwgPSBtYXJrZG93blBhcnNlcignICMgSW52YWxpZCcpIFxyXG4gICAgZXhwZWN0KGFjdHVhbCkudG8uZGVlcC5lcXVhbChleHBlY3RlZClcclxuICB9KVxyXG5cclxuXHJcbn0pXHJcblxyXG5cclxuLy8gbGV0IGFzc2VydCA9IHJlcXVpcmUoXCJjaGFpXCIpLmFzc2VydDtcclxuLy8gZGVzY3JpYmUoJ01hcmtkb3duIEhlYWRlcnMnLCBmdW5jdGlvbigpIHtcclxuLy8gICBpdCgnYmFzaWNfdmFsaWRfY2FzZXMnLCBmdW5jdGlvbigpIHtcclxuLy8gICAgIC8vYXNzZXJ0LmRlZXBFcXVhbChtYXJrZG93blBhcnNlcihcIiMgaGVhZGVyXCIpLCBcIjxoMT5oZWFkZXI8L2gxPlwiKTtcclxuLy8gICAgIGFzc2VydC5kZWVwRXF1YWwobWFya2Rvd25QYXJzZXIoXCIjIyBzbWFsbGVyIGhlYWRlclwiKSwgXCI8aDI+c21hbGxlciBoZWFkZXI8L2gyPlwiKTtcclxuLy8gICB9KTtcclxuLy8gICBpdCgnYmFzaWNfaW52YWxpZF9jYXNlcycsIGZ1bmN0aW9uKCkge1xyXG4vLyAgICAgYXNzZXJ0LmRlZXBFcXVhbChtYXJrZG93blBhcnNlcihcIiNJbnZhbGlkXCIpLCBcIiNJbnZhbGlkXCIpO1xyXG4vLyAgIH0pO1xyXG4vLyB9KTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "markdownParser.test.js"
      ],
      "names": [
        "describe",
        "it",
        "expectedH1",
        "actualH1",
        "expectedH2",
        "actualH2",
        "expectedH6",
        "actualH6",
        "to",
        "deep",
        "equal",
        "expected",
        "actual"
      ],
      "mappings": ";;AAAA;;AACA;;AAEAA,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AACjCC,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnC,QAAMC,UAAU,GAAG,iBAAnB;AACA,QAAMC,QAAQ,GAAG,oCAAe,UAAf,CAAjB;AACA,QAAMC,UAAU,GAAG,yBAAnB;AACA,QAAMC,QAAQ,GAAG,oCAAe,mBAAf,CAAjB;AACA,QAAMC,UAAU,GAAG,oBAAnB;AACA,QAAMC,QAAQ,GAAG,oCAAe,kBAAf,CAAjB;AAEA,sBAAOJ,QAAP,EAAiBK,EAAjB,CAAoBC,IAApB,CAAyBC,KAAzB,CAA+BR,UAA/B;AACA,sBAAOG,QAAP,EAAiBG,EAAjB,CAAoBC,IAApB,CAAyBC,KAAzB,CAA+BN,UAA/B;AACA,sBAAOG,QAAP,EAAiBC,EAAjB,CAAoBC,IAApB,CAAyBC,KAAzB,CAA+BJ,UAA/B;AACD,GAXC,CAAF;AAaAL,EAAAA,EAAE,CAAC,sEAAD,EAAyE,YAAM;AAC/E,QAAMU,QAAQ,GAAG,UAAjB;AACA,QAAMC,MAAM,GAAG,oCAAe,UAAf,CAAf;AACA,sBAAOA,MAAP,EAAeJ,EAAf,CAAkBC,IAAlB,CAAuBC,KAAvB,CAA6BC,QAA7B;AACD,GAJC,CAAF;AAMAV,EAAAA,EAAE,CAAC,6EAAD,EAAgF,YAAM;AACtF,QAAMU,QAAQ,GAAG,iBAAjB;AACA,QAAMC,MAAM,GAAG,oCAAe,iBAAf,CAAf;AACA,sBAAOA,MAAP,EAAeJ,EAAf,CAAkBC,IAAlB,CAAuBC,KAAvB,CAA6BC,QAA7B;AACD,GAJC,CAAF;AAMAV,EAAAA,EAAE,CAAC,uEAAD,EAA0E,YAAM;AAChF,QAAMU,QAAQ,GAAG,WAAjB;AACA,QAAMC,MAAM,GAAG,oCAAe,WAAf,CAAf;AACA,sBAAOA,MAAP,EAAeJ,EAAf,CAAkBC,IAAlB,CAAuBC,KAAvB,CAA6BC,QAA7B;AACD,GAJC,CAAF;AAMAV,EAAAA,EAAE,CAAC,wEAAD,EAA2E,YAAM;AACjF,QAAMU,QAAQ,GAAG,YAAjB;AACA,QAAMC,MAAM,GAAG,oCAAe,YAAf,CAAf;AACA,sBAAOA,MAAP,EAAeJ,EAAf,CAAkBC,IAAlB,CAAuBC,KAAvB,CAA6BC,QAA7B;AACD,GAJC,CAAF;AAOD,CAvCO,CAAR,C,CA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
      "sourceRoot": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser\\src\\",
      "sourcesContent": [
        "import { expect } from 'chai'\r\nimport { markdownParser } from './markdownParser';\r\n\r\ndescribe('Markdown Headers', () => {\r\n  it('passes basic valid cases', () => {\r\n    const expectedH1 = \"<h1>header</h1>\"\r\n    const actualH1 = markdownParser(\"# header\")\r\n    const expectedH2 = \"<h2>smaller header</h2>\"\r\n    const actualH2 = markdownParser(\"## smaller header\")\r\n    const expectedH6 = \"<h6>h6 header</h6>\"\r\n    const actualH6 = markdownParser(\"###### h6 header\")\r\n\r\n    expect(actualH1).to.deep.equal(expectedH1)\r\n    expect(actualH2).to.deep.equal(expectedH2)\r\n    expect(actualH6).to.deep.equal(expectedH6)\r\n  })\r\n\r\n  it(\"returns the input for basic invalid cases where input is '#Invalid' \", () => {\r\n    const expected = '#Invalid'\r\n    const actual = markdownParser('#Invalid') \r\n    expect(actual).to.deep.equal(expected)\r\n  })\r\n\r\n  it(\"returns the input for basic invalid cases where input is '####### Invalid' \", () => {\r\n    const expected = '########Invalid'\r\n    const actual = markdownParser('########Invalid') \r\n    expect(actual).to.deep.equal(expected)\r\n  })\r\n\r\n  it(\"returns the input for basic invalid cases where input is ' #Invalid' \", () => {\r\n    const expected = ' #Invalid'\r\n    const actual = markdownParser(' #Invalid') \r\n    expect(actual).to.deep.equal(expected)\r\n  })\r\n\r\n  it(\"returns the input for basic invalid cases where input is ' # Invalid' \", () => {\r\n    const expected = ' # Invalid'\r\n    const actual = markdownParser(' # Invalid') \r\n    expect(actual).to.deep.equal(expected)\r\n  })\r\n\r\n\r\n})\r\n\r\n\r\n// let assert = require(\"chai\").assert;\r\n// describe('Markdown Headers', function() {\r\n//   it('basic_valid_cases', function() {\r\n//     //assert.deepEqual(markdownParser(\"# header\"), \"<h1>header</h1>\");\r\n//     assert.deepEqual(markdownParser(\"## smaller header\"), \"<h2>smaller header</h2>\");\r\n//   });\r\n//   it('basic_invalid_cases', function() {\r\n//     assert.deepEqual(markdownParser(\"#Invalid\"), \"#Invalid\");\r\n//   });\r\n// });"
      ]
    },
    "sourceType": "script",
    "mtime": 1607871119212
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\samsa\\\\Desktop\\\\Code\\\\markdownParser\\\\src\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\samsa\\\\Desktop\\\\Code\\\\markdownParser\",\"filename\":\"C:\\\\Users\\\\samsa\\\\Desktop\\\\Code\\\\markdownParser\\\\src\\\\markdownParser.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\samsa\\\\Desktop\\\\Code\\\\markdownParser\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser\\src\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser",
      "filename": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser\\src\\markdownParser.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "BigIntLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "StaticBlock": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser\\src\\markdownParser.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser\\src\\markdownParser.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser\\src\\",
        "sourceFileName": "markdownParser.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.markdownParser = void 0;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar markdownParser = function markdownParser(markdown) {\n  var letters = 'abcdefghijklmnopqrstuvwxyz';\n  var hashes = markdown.split(\" \")[0];\n  var text = markdown.split(\" \");\n\n  var _iterator = _createForOfIteratorHelper(hashes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _i = _step.value;\n\n      if (letters.includes(_i)) {\n        return markdown;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (hashes.length > 6 || hashes.length < 1) {\n    return markdown;\n  }\n\n  var textArr = [];\n\n  for (var i = 1; i < text.length; i++) {\n    textArr.push(text[i]);\n  }\n\n  var htmlHeader = textArr.join(' ');\n  var num = hashes.length;\n  return \"<h\".concat(num, \">\").concat(htmlHeader, \"</h\").concat(num, \">\");\n}; // const validator = (hashes, markdown) => {\n//   let letters = 'abcdefghijklmnopqrstuvwxyz'\n//   for (let i of hashes) {\n//     if (letters.includes(i)) {\n//       return(markdown)\n//     }\n//   }\n//   if (hashes.length > 6 || hashes.length < 1) {\n//     return(markdown)\n//   }\n// }\n// function markdownParser (markdown) {\n//   let letters = 'abcdefghijklmnopqrstuvwxyz'\n//   let hashes = markdown.split(\" \")[0]\n//   let text = markdown.split(\" \")\n//   for (let i of hashes) {\n//     if (letters.includes(i)) {\n//       return(markdown)\n//     }\n//   }\n//   if (hashes.length > 6) {\n//     return(markdown)\n//   }\n//   let textArr = []\n//   for (let i = 1; i < text.length; i++) {\n//     textArr.push(text[i])\n//   }\n//   htmlHeader = textArr.join(' ')\n//   let num = hashes.length\n//   return(`<h${num}>${htmlHeader}</h${num}>`)\n// }\n\n\nexports.markdownParser = markdownParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcmtkb3duUGFyc2VyLmpzIl0sIm5hbWVzIjpbIm1hcmtkb3duUGFyc2VyIiwibWFya2Rvd24iLCJsZXR0ZXJzIiwiaGFzaGVzIiwic3BsaXQiLCJ0ZXh0IiwiaSIsImluY2x1ZGVzIiwibGVuZ3RoIiwidGV4dEFyciIsInB1c2giLCJodG1sSGVhZGVyIiwiam9pbiIsIm51bSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFPLElBQU1BLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQ0MsUUFBRCxFQUFjO0FBRTFDLE1BQUlDLE9BQU8sR0FBRyw0QkFBZDtBQUNBLE1BQUlDLE1BQU0sR0FBR0YsUUFBUSxDQUFDRyxLQUFULENBQWUsR0FBZixFQUFvQixDQUFwQixDQUFiO0FBQ0EsTUFBSUMsSUFBSSxHQUFHSixRQUFRLENBQUNHLEtBQVQsQ0FBZSxHQUFmLENBQVg7O0FBSjBDLDZDQU01QkQsTUFONEI7QUFBQTs7QUFBQTtBQU0xQyx3REFBc0I7QUFBQSxVQUFiRyxFQUFhOztBQUNwQixVQUFJSixPQUFPLENBQUNLLFFBQVIsQ0FBaUJELEVBQWpCLENBQUosRUFBeUI7QUFDdkIsZUFBT0wsUUFBUDtBQUNEO0FBQ0Y7QUFWeUM7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFZMUMsTUFBSUUsTUFBTSxDQUFDSyxNQUFQLEdBQWdCLENBQWhCLElBQXFCTCxNQUFNLENBQUNLLE1BQVAsR0FBZ0IsQ0FBekMsRUFBNEM7QUFDMUMsV0FBT1AsUUFBUDtBQUNEOztBQUVELE1BQUlRLE9BQU8sR0FBRyxFQUFkOztBQUNBLE9BQUssSUFBSUgsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsSUFBSSxDQUFDRyxNQUF6QixFQUFpQ0YsQ0FBQyxFQUFsQyxFQUFzQztBQUNwQ0csSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWFMLElBQUksQ0FBQ0MsQ0FBRCxDQUFqQjtBQUNEOztBQUNELE1BQUlLLFVBQVUsR0FBR0YsT0FBTyxDQUFDRyxJQUFSLENBQWEsR0FBYixDQUFqQjtBQUNBLE1BQUlDLEdBQUcsR0FBR1YsTUFBTSxDQUFDSyxNQUFqQjtBQUNBLHFCQUFZSyxHQUFaLGNBQW1CRixVQUFuQixnQkFBbUNFLEdBQW5DO0FBQ0QsQ0F2Qk0sQyxDQXlCUDtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXHNhbXNhXFxEZXNrdG9wXFxDb2RlXFxtYXJrZG93blBhcnNlclxcc3JjXFwiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgbWFya2Rvd25QYXJzZXIgPSAobWFya2Rvd24pID0+IHtcclxuXHJcbiAgbGV0IGxldHRlcnMgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonXHJcbiAgbGV0IGhhc2hlcyA9IG1hcmtkb3duLnNwbGl0KFwiIFwiKVswXVxyXG4gIGxldCB0ZXh0ID0gbWFya2Rvd24uc3BsaXQoXCIgXCIpXHJcbiAgXHJcbiAgZm9yIChsZXQgaSBvZiBoYXNoZXMpIHtcclxuICAgIGlmIChsZXR0ZXJzLmluY2x1ZGVzKGkpKSB7XHJcbiAgICAgIHJldHVybihtYXJrZG93bilcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgaWYgKGhhc2hlcy5sZW5ndGggPiA2IHx8IGhhc2hlcy5sZW5ndGggPCAxKSB7XHJcbiAgICByZXR1cm4obWFya2Rvd24pXHJcbiAgfVxyXG4gIFxyXG4gIGxldCB0ZXh0QXJyID0gW11cclxuICBmb3IgKGxldCBpID0gMTsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcclxuICAgIHRleHRBcnIucHVzaCh0ZXh0W2ldKVxyXG4gIH1cclxuICBsZXQgaHRtbEhlYWRlciA9IHRleHRBcnIuam9pbignICcpXHJcbiAgbGV0IG51bSA9IGhhc2hlcy5sZW5ndGhcclxuICByZXR1cm4oYDxoJHtudW19PiR7aHRtbEhlYWRlcn08L2gke251bX0+YClcclxufVxyXG5cclxuLy8gY29uc3QgdmFsaWRhdG9yID0gKGhhc2hlcywgbWFya2Rvd24pID0+IHtcclxuXHJcbi8vICAgbGV0IGxldHRlcnMgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonXHJcblxyXG4vLyAgIGZvciAobGV0IGkgb2YgaGFzaGVzKSB7XHJcbi8vICAgICBpZiAobGV0dGVycy5pbmNsdWRlcyhpKSkge1xyXG4vLyAgICAgICByZXR1cm4obWFya2Rvd24pXHJcbi8vICAgICB9XHJcbi8vICAgfVxyXG4gIFxyXG4vLyAgIGlmIChoYXNoZXMubGVuZ3RoID4gNiB8fCBoYXNoZXMubGVuZ3RoIDwgMSkge1xyXG4vLyAgICAgcmV0dXJuKG1hcmtkb3duKVxyXG4vLyAgIH1cclxuLy8gfVxyXG5cclxuXHJcblxyXG4vLyBmdW5jdGlvbiBtYXJrZG93blBhcnNlciAobWFya2Rvd24pIHtcclxuICBcclxuLy8gICBsZXQgbGV0dGVycyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eidcclxuLy8gICBsZXQgaGFzaGVzID0gbWFya2Rvd24uc3BsaXQoXCIgXCIpWzBdXHJcbi8vICAgbGV0IHRleHQgPSBtYXJrZG93bi5zcGxpdChcIiBcIilcclxuICBcclxuLy8gICBmb3IgKGxldCBpIG9mIGhhc2hlcykge1xyXG4vLyAgICAgaWYgKGxldHRlcnMuaW5jbHVkZXMoaSkpIHtcclxuLy8gICAgICAgcmV0dXJuKG1hcmtkb3duKVxyXG4vLyAgICAgfVxyXG4vLyAgIH1cclxuICBcclxuLy8gICBpZiAoaGFzaGVzLmxlbmd0aCA+IDYpIHtcclxuLy8gICAgIHJldHVybihtYXJrZG93bilcclxuLy8gICB9XHJcbiAgXHJcbi8vICAgbGV0IHRleHRBcnIgPSBbXVxyXG4vLyAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xyXG4vLyAgICAgdGV4dEFyci5wdXNoKHRleHRbaV0pXHJcbi8vICAgfVxyXG4vLyAgIGh0bWxIZWFkZXIgPSB0ZXh0QXJyLmpvaW4oJyAnKVxyXG4vLyAgIGxldCBudW0gPSBoYXNoZXMubGVuZ3RoXHJcbi8vICAgcmV0dXJuKGA8aCR7bnVtfT4ke2h0bWxIZWFkZXJ9PC9oJHtudW19PmApXHJcbi8vIH0iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "markdownParser.js"
      ],
      "names": [
        "markdownParser",
        "markdown",
        "letters",
        "hashes",
        "split",
        "text",
        "i",
        "includes",
        "length",
        "textArr",
        "push",
        "htmlHeader",
        "join",
        "num"
      ],
      "mappings": ";;;;;;;;;;;;;AAAO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAAc;AAE1C,MAAIC,OAAO,GAAG,4BAAd;AACA,MAAIC,MAAM,GAAGF,QAAQ,CAACG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAb;AACA,MAAIC,IAAI,GAAGJ,QAAQ,CAACG,KAAT,CAAe,GAAf,CAAX;;AAJ0C,6CAM5BD,MAN4B;AAAA;;AAAA;AAM1C,wDAAsB;AAAA,UAAbG,EAAa;;AACpB,UAAIJ,OAAO,CAACK,QAAR,CAAiBD,EAAjB,CAAJ,EAAyB;AACvB,eAAOL,QAAP;AACD;AACF;AAVyC;AAAA;AAAA;AAAA;AAAA;;AAY1C,MAAIE,MAAM,CAACK,MAAP,GAAgB,CAAhB,IAAqBL,MAAM,CAACK,MAAP,GAAgB,CAAzC,EAA4C;AAC1C,WAAOP,QAAP;AACD;;AAED,MAAIQ,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACG,MAAzB,EAAiCF,CAAC,EAAlC,EAAsC;AACpCG,IAAAA,OAAO,CAACC,IAAR,CAAaL,IAAI,CAACC,CAAD,CAAjB;AACD;;AACD,MAAIK,UAAU,GAAGF,OAAO,CAACG,IAAR,CAAa,GAAb,CAAjB;AACA,MAAIC,GAAG,GAAGV,MAAM,CAACK,MAAjB;AACA,qBAAYK,GAAZ,cAAmBF,UAAnB,gBAAmCE,GAAnC;AACD,CAvBM,C,CAyBP;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
      "sourceRoot": "C:\\Users\\samsa\\Desktop\\Code\\markdownParser\\src\\",
      "sourcesContent": [
        "export const markdownParser = (markdown) => {\r\n\r\n  let letters = 'abcdefghijklmnopqrstuvwxyz'\r\n  let hashes = markdown.split(\" \")[0]\r\n  let text = markdown.split(\" \")\r\n  \r\n  for (let i of hashes) {\r\n    if (letters.includes(i)) {\r\n      return(markdown)\r\n    }\r\n  }\r\n  \r\n  if (hashes.length > 6 || hashes.length < 1) {\r\n    return(markdown)\r\n  }\r\n  \r\n  let textArr = []\r\n  for (let i = 1; i < text.length; i++) {\r\n    textArr.push(text[i])\r\n  }\r\n  let htmlHeader = textArr.join(' ')\r\n  let num = hashes.length\r\n  return(`<h${num}>${htmlHeader}</h${num}>`)\r\n}\r\n\r\n// const validator = (hashes, markdown) => {\r\n\r\n//   let letters = 'abcdefghijklmnopqrstuvwxyz'\r\n\r\n//   for (let i of hashes) {\r\n//     if (letters.includes(i)) {\r\n//       return(markdown)\r\n//     }\r\n//   }\r\n  \r\n//   if (hashes.length > 6 || hashes.length < 1) {\r\n//     return(markdown)\r\n//   }\r\n// }\r\n\r\n\r\n\r\n// function markdownParser (markdown) {\r\n  \r\n//   let letters = 'abcdefghijklmnopqrstuvwxyz'\r\n//   let hashes = markdown.split(\" \")[0]\r\n//   let text = markdown.split(\" \")\r\n  \r\n//   for (let i of hashes) {\r\n//     if (letters.includes(i)) {\r\n//       return(markdown)\r\n//     }\r\n//   }\r\n  \r\n//   if (hashes.length > 6) {\r\n//     return(markdown)\r\n//   }\r\n  \r\n//   let textArr = []\r\n//   for (let i = 1; i < text.length; i++) {\r\n//     textArr.push(text[i])\r\n//   }\r\n//   htmlHeader = textArr.join(' ')\r\n//   let num = hashes.length\r\n//   return(`<h${num}>${htmlHeader}</h${num}>`)\r\n// }"
      ]
    },
    "sourceType": "script",
    "mtime": 1607871119190
  }
}